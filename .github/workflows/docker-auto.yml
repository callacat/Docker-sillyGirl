name: Auto-Build

on:
  push:
    branches:
      - main
  watch:
    types: [started]
  schedule:
    - cron: 5 */12 * * *

jobs:

  build_Docker:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: 获取新旧文件
      run: |
        wget -q https://raw.githubusercontent.com/cdle/binary/main/compile_time.go -O newTime.txt
        wget -q https://github.com/callacat/sillyGirl-Backup/releases/download/latest/compile_time.go -O lastTime.txt
        git clone https://github.com/cdle/binary.git
        ls -R
         
    - name: 读取最新compile_time.go文件内容保存到变量
      id: readNewContent
      uses: juliangruber/read-file-action@v1
      with:
        path: ./newTime.txt

    - name: 查找最新时间戳
      id: newTimeStamp
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: '[0-9]+'
        regex_flags: 'gim'
        search_string: '${{ steps.readNewContent.outputs.content }}'

    - name: 输出最新时间戳
      run: |
        echo "${{ steps.newTimeStamp.outputs.first_match }}"
  
    - name: 读取上一次compile_time.go文件内容保存到变量
      id: readLastContent
      uses: juliangruber/read-file-action@v1
      with:
        path: ./lastTime.txt

    - name: 查找上次时间戳
      id: lastTimeStamp
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: '[0-9]+'
        regex_flags: 'gim'
        search_string: '${{ steps.readLastContent.outputs.content }}'

    - name: 输出上次时间戳
      run: |
          echo "${{ steps.lastTimeStamp.outputs.first_match }}"

    - name: 格式化时间戳
      run: |
        sh ./Operation.sh > ./date.txt
        cat ./date.txt

    - name: 读取date.txt文件内容
      id: readDateContent
      uses: juliangruber/read-file-action@v1
      with:
        path: ./date.txt

    - name: 取出日期
      id: creatDate
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: '.+'
        regex_flags: 'gim'
        search_string: '${{ steps.readDateContent.outputs.content }}'

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push arm64
      uses: docker/build-push-action@v2
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      with:
        context: .
        file: ./DockerFiles/Dockerfile_arm
          # 所需要的体系结构，可以在 Available platforms 步骤中获取所有的可用架构
        platforms: linux/arm64
          # 镜像推送时间
        push: ${{ github.event_name != 'pull_request' }}
          # 给清单打上多个标签
        tags: |
            ${{ secrets.DOCKER_USERNAME }}/silly:arm64

    - name: Build and push armv7
      uses: docker/build-push-action@v2
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      with:
        context: .
        file: ./DockerFiles/Dockerfile_arm_v7
          # 所需要的体系结构，可以在 Available platforms 步骤中获取所有的可用架构
        platforms: linux/arm/v7
          # 镜像推送时间
        push: ${{ github.event_name != 'pull_request' }}
          # 给清单打上多个标签
        tags: |
            ${{ secrets.DOCKER_USERNAME }}/silly:armv7

    - name: Build and push amd
      uses: docker/build-push-action@v2
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      with:
        context: .
        file: ./DockerFiles/Dockerfile
          # 所需要的体系结构，可以在 Available platforms 步骤中获取所有的可用架构
        platforms: linux/amd64
          # 镜像推送时间
        push: ${{ github.event_name != 'pull_request' }}
          # 给清单打上多个标签
        tags: |
            ${{ secrets.DOCKER_USERNAME }}/silly:amd64

    - name: 创建latest列表
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      run: |
        docker manifest create ${{ secrets.DOCKER_USERNAME }}/silly \
          ${{ secrets.DOCKER_USERNAME }}/silly:arm64 \
          ${{ secrets.DOCKER_USERNAME }}/silly:amd64 \
          ${{ secrets.DOCKER_USERNAME }}/silly:armv7
        
    - name: 设置latest列表
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      run: |
        docker manifest annotate ${{ secrets.DOCKER_USERNAME }}/silly \
          ${{ secrets.DOCKER_USERNAME }}/silly:arm64 \
          --os linux --arch arm64 --variant v8
        docker manifest annotate ${{ secrets.DOCKER_USERNAME }}/silly \
          ${{ secrets.DOCKER_USERNAME }}/silly:amd64 \
          --os linux --arch amd64
        docker manifest annotate ${{ secrets.DOCKER_USERNAME }}/silly \
          ${{ secrets.DOCKER_USERNAME }}/silly:arm \
          --os linux --arch arm --variant v7

    - name: 推送latest列表
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      run: docker manifest push ${{ secrets.DOCKER_USERNAME }}/silly

    - name: 创建日期列表
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      run: |
        docker manifest create ${{ secrets.DOCKER_USERNAME }}/silly:${{ steps.creatDate.outputs.first_match }} \
          ${{ secrets.DOCKER_USERNAME }}/silly:arm64 \
          ${{ secrets.DOCKER_USERNAME }}/silly:amd64

    - name: 设置日期列表
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      run: |
        docker manifest annotate ${{ secrets.DOCKER_USERNAME }}/silly:${{ steps.creatDate.outputs.first_match }} \
          ${{ secrets.DOCKER_USERNAME }}/silly:arm64 \
          --os linux --arch arm64 --variant v8
        docker manifest annotate ${{ secrets.DOCKER_USERNAME }}/silly:${{ steps.creatDate.outputs.first_match }} \
          ${{ secrets.DOCKER_USERNAME }}/silly:amd64 \
          --os linux --arch amd64
        docker manifest annotate ${{ secrets.DOCKER_USERNAME }}/silly:${{ steps.creatDate.outputs.first_match }} \
          ${{ secrets.DOCKER_USERNAME }}/silly:armv7 \
          --os linux --arch arm --variant v7

    - name: 推送日期列表
      # if: ${{ steps.newTimeStamp.outputs.first_match != steps.lastTimeStamp.outputs.first_match }}
      run: docker manifest push ${{ secrets.DOCKER_USERNAME }}/silly:${{ steps.creatDate.outputs.first_match }}

  del_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 10
          keep_minimum_runs: 5
